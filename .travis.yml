sudo: true
language: c
os: linux
dist: jammy
services: docker
addons:
  hosts:
    - mariadb.example.com
    - mariadb1.example.com
    - mariadb2.example.com
    - mariadb3.example.com

install:
  - git clone https://github.com/mariadb-corporation/connector-test-machine.git
  - |-
    case $TRAVIS_OS_NAME in
      windows)
        connector-test-machine/launch.bat -t "$srv" -v "$v" -d "$DB"
        ;;
      linux)
        source connector-test-machine/launch.sh -t "$srv" -v "$v" -d "$DB" -l "$local" -c "$CLEAR_TEXT" -p "$packet"
        ;;
    esac

before_install:
  - export MAIN_PATH=`pwd`
  # install pyenv to test multiple python version
  - git clone https://github.com/pyenv/pyenv.git ~/.pyenv
  - export PYENV_ROOT="$HOME/.pyenv"
  - eval "$(pyenv init -)"
  - export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
  # install c dependency
  - |-
    if [ "$TRAVIS_OS_NAME" == "linux" ] ; then
      sudo apt-get install software-properties-common
      sudo apt-get install -f libssl-dev libssl1.1
      sudo apt-get install -f
    fi
  - git clone https://github.com/mariadb-corporation/mariadb-connector-c.git ~/.cc_3
  - cd ~/.cc_3
  - mkdir bld
  - cd bld
  - |-
    case $TRAVIS_OS_NAME in
      windows)
        choco install python
        python --version
        export PATH=$(cmd.exe //c "refreshenv > nul & C:\Progra~1\Git\bin\bash -c 'echo \$PATH' ")
        python --version    
        
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="C:/Program Files/MariaDB/MariaDB Connector C 64-bit"
        cmake --build . --config Release
        dir C:/Users/travis/.cc_3/bld/unittest/libmariadb/Release
        Start-Process C:\Temp\7z1900-x64.msi -ArgumentList "/quiet"
        ;;
      osx)
        cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_EXTERNAL_ZLIB:BOOL=ON -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1
        make -j4
        sudo make install
        ;;
      linux)
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
        make -j4
        sudo make install
        git clone https://github.com/momo-lab/pyenv-install-latest.git "$(pyenv root)"/plugins/pyenv-install-latest
        export REAL_PYTHON_VERSION=$(pyenv install-latest --print $PYTHON_VER)
        echo $REAL_PYTHON_VERSION
        pyenv install $REAL_PYTHON_VERSION
        export PYENV_VERSION=$REAL_PYTHON_VERSION
        pyenv versions
        ;;
    esac
  - export MARIADB_PLUGIN_DIR==`mariadb_config --plugindir`
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/mariadb
  # install "install-latest" to retrieve latest python version corresponding to major.minor version
  # install server
  - cd $MAIN_PATH

env:
  global: PYTHON_VER=3.10 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 DB=testp CLEAR_TEXT=0


jobs:
  fast_finish: true
  include:
    - env: srv=mariadb v=10.6
      os: windows
      language: shell
      name: "CS 10.6 - Windows"

script:
  - ls -lrt
  - python --version
  - python -m pip install .
#  - python setup.py build
#  - python setup.py install
  - cd testing
  - |-
    if [ -z "$BENCH" ] ; then
      python -m unittest discover -v
    else
      pip install mysql-connector-python pymysql pyperf
      export TEST_MODULE=mariadb
      python bench_init.py --inherit-environ=TEST_MODULE,TEST_DB_USER,TEST_DB_HOST,TEST_DB_DATABASE,TEST_DB_PORT,TEST_REQUIRE_TLS,TEST_DB_PASSWORD --copy-env
      python bench.py -o mariadb_bench.json --inherit-environ=TEST_MODULE,TEST_DB_USER,TEST_DB_HOST,TEST_DB_DATABASE,TEST_DB_PORT,TEST_REQUIRE_TLS,TEST_DB_PASSWORD --copy-env
      export TEST_MODULE=mysql.connector
      python bench.py -o mysql-connector-python_bench.json --inherit-environ=TEST_MODULE,TEST_DB_USER,TEST_DB_HOST,TEST_DB_DATABASE,TEST_DB_PORT,TEST_REQUIRE_TLS,TEST_DB_PASSWORD --copy-env
      export TEST_MODULE=pymysql
      python bench.py -o pymysql_bench.json --inherit-environ=TEST_MODULE,TEST_DB_USER,TEST_DB_HOST,TEST_DB_DATABASE,TEST_DB_PORT,TEST_REQUIRE_TLS,TEST_DB_PASSWORD --copy-env
      python -m pyperf compare_to pymysql_bench.json mysql-connector-python_bench.json mariadb_bench.json --table
    fi
